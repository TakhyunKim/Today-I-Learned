* _(~~) => 언더바를 사용하는 이유???

  - 코딩 컨벤션(스타일 가이드)
    // 함수명 앞에 _언더바를 붙여주는 것은 일종의 코딩 컨벤션이다.
       코딩 컨벤션이란 프로그래밍 언어별로 권장하는 코딩 규칙(스타일)이다. 예를들면 구글에서 권장하는 방식은 링크를 통해 확인 할 수있다.
       반드시 따라야 하는 룰이라기보다는 이해하기 쉬운 코드를 작성하기 위한 가이드 정도로 참고해서 활용할 수 있다.
       보통은 지역변수나 sub function일 경우 이름 앞에 언더바를 써주는데 이는 자바스크립트의 경우 접근제한자(public,private)가
       없기 때문에 변수명으로 사용범위를 나타내는 것. 하기의 내용은 일반적인 함수 이름에 관한 가이드이다.
       ------ 함수 이름 -------
       1. 동사를 사용하여 작성한다.
       2. Private 메소드인 경우 메서드 이름 앞에 언더스코어(_)를 사용한다.
       3. 카멜 표기법을 준수한다. 복합어 으름은 첫번째 단어를 소문자로 작성하고, 두번째 이상의 단어 첫글자를 대문자로 작성하여 단어를 구분한다.
       4. 함수 이름의 첫글자로 연속된 두개의 언더스코어(__) 기호와 달러 기호($)는 사용하지 않는다.
       5. Getter,Setter 메서드는 반드시 'get + 멤버변수 이름', 'set + 멤버변수 이름' 형식으로 작성한다.
       6. 이벤트 핸들러 메서드는 _on + 이벤트명으로 시작하도록 정의한다.
       
   - 추가 설명 (Koans_aboutHigherOrderFuctions.js 풀다가 생긴 의문에 대한 답)
   // 일반적으로 코딩 시에 변수나 함수명 앞에 _(언더바)를 사용하는 경우는 참조나 temp값들을 저장할 때 씁니다.
      연산 시에 임시적으로 담아둘 변수를 선언할때 쓰이는 방법입니다.
      특별한 차이점은 없습니다. 단순하게 가독성을 높여준다는 점이 있겠네요
      (예를 들어 제가 저 코드를 딱 봤을때, "음.. 변수명 앞에 언더바가 붙었네.. 임시적으로 뭔가 여사하면서 쓸 변수인가보군" 하면서 유추할 수 있는..) (필자는 이해를 못하겠음 도저히 내가 푸는 코드에선 왜 쓰는지)
      


* Array.portotype.filter()

  - filter() 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 반환합니다.

    const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

    const result = words.filter(word => word.length > 6);

    console.log(result);
    // expected output: Array ["exuberant", "destruction", "present"]'

* Array.prototype.map()

  - map() 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환합니다.
  
  const array1 = [1, 4, 9, 16];

  // pass a function to map
  const map1 = array1.map(x => x * 2);

  console.log(map1);
  // expected output: Array [2, 8, 18, 32]

* Array.prototype.reduce()

  - reduce() 메서드는 배열의 각 요소에 대해 주어진 리듀서(reducer)함수를 실행하고, 하나의 결과값을 반환합니다.
  
    const array1 = [1, 2, 3, 4];
    const reducer = (accumulator, currentValue) => accumulator + currentValue;

    // 1 + 2 + 3 + 4
    console.log(array1.reduce(reducer));
    // expected output: 10

    // 5 + 1 + 2 + 3 + 4
    console.log(array1.reduce(reducer, 5));
    // expected output: 15
    
* Array.prototype.forEach()

  - forEach() 메서드는 주어진 함수를 배열 요소 각각에 대해 실행합니다.
  
  const array1 = ['a', 'b', 'c'];

  array1.forEach(element => console.log(element));

  // expected output: "a"
  // expected output: "b"
  // expected output: "c"
  
* _.range(7);의 뜻

  - _.range()함수는 목록에서 요소를 하나씩 가져와 코드에서 지정된 작업을 수행합니다. 여기처럼 작업은 목록의 요소를 추가하는 것입니다.
      모든 요소를 추가하면 축소 기능이 종료됩니다. 여기서 메모의 시작 값은 '0'으로 간주됩니다.
      console.log(_.range(7)); // 0 ~ 6 까지 쭈루룩 나열되어서 출력

* 2개의 매개변수를 _.range() 함수에 전달할 경우 (_.range(7,14); 일 경우의 내용)

- 2개의 매개변수, 즉 시작 및 중지 매개 변수만 전달하여 함수를 사용할 수도 있습니다. 그러면 오류가 없습니다.
  위와 마찬가지로 시작 매개 변수는 7이며 목록에 포함됩니다. 그리고 종료 매개 변수는 _.range()함수에 따라 목록에 포함되지
  않은 14입니다. 결과적으로는 7~13까지의 목록을 얻을 수 있습니다.
  
* 3개의 매개변수를 _.range() 함수에 전달할 경우 (_.range(7,21,3); 일 경우의 내용)

- 여기서는 3개의 매개 변수를 모두 가져옵니다. 즉 목록의 시작, 중지 및 단계가 언급됩니다. 따라서 기본값이 필요하지 않습니다.
  여기서 시작은 7에서 시작하고 단계는 3이며 이는 7 이후 요소가 목록에서 7+3=10이 됨을 의미합니다. 그리고 계산은 20이 끝날 때까지 같은 방식으로 게속 됩니다.
  결과 값은 맨 앞부터 index(0)임 ___ 7,10,13,16,19 (계속 맨 끝의 매개 변수값인 3을 더해서 20까지 19에서 더하면 21이므로 제외)
  
