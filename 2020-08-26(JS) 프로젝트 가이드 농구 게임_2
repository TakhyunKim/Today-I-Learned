# 프로젝트 농구 게임

 * 코드 블록이 없는 if문
 
  - 컴퓨터의 차례인지를 판단하는 if문을 보면 {}로 쌓인 {코드 블록}이 없는 걸 볼 수 있습니다. 이런 경우 if 문을 비롯한 for, while 문 등은
    바로 다음에 있는 단 한 개의 구문만을 연관된 코드로 인식합니다. 따라서 다음의 두 코드는 동일하다.
    
    1) if (!isComputerTurn)
        return;
        
    2) if (!isComputerTurn) {
        return;
       }
    이 두 가지 스타일은 개발자 사이에서도 호불호가 나뉘는 부분입니다. 필자는 개인적으로 첫번째 스타일을 선호합니다만.
    코드의 가독성을 고려해서 적절히 선택해야합니다. 실제 프로젝트들 중에서는 아예 한 가지의 방법으로 통일하도록
    가이드 라인을 제시하기도 합니다.
    
  * button 태그 비활성화
    
    - <button> 태그를 비활성화시키기 위해서는 버튼의 'disabled' 속성값을 'true'로 설정해 주면 됩니다.
      이를 위해서는 우선 [버튼] 엘리먼트를 셀렉트해야겠죠. 이전의 했던 것과 같이 각각에 id를 부여하고 document.getElementByID()를 사용해서 가져오는 방법도 있지만,
      이 경우에는 좀 더 좋은 방식이 있습니다. 바로 document.getElmentsByClassName()을 사용하는 것입니다.
      
      이 함수는 id가 아닌 클래스로 원하는 엘리먼트들을 셀렉트해 주기 때문에 비슷한 엘리먼트를 그룹지어 가져올 때 유용합니다.
      버튼이 하나뿐인 컴퓨터와 달리 2점슛 / 3점슛 등 2가지로 구성된 사용자의 경우, 슛 종류의 구분 없이 모든 버튼을 비활성화해야 하므로 그룹을 지어 한번에 활성화 / 비활성화
      시킨다면 보다 편할 것입니다.
      
      위 부분을 하다보면 함수명이 특이한 점이 있습니다. getElments <= 복수 형태 입니다. 즉, 리턴값이 하나가 아닌 복수의 형태로 오게 됩니다.
      그러므로 리턴된 엘리먼트들을 다루기 위해서는 배열을 다루듯이 반복문을 사용해서 접근을 해야합니다. 셀렉트된 엘리먼트가 한 개 밖에 없는 상태여도 동일합니다.
      
  * 디버거
  
    - 디버거는 실행 중인 프로그램의 상태를 들여다보고 제어할 수 있게 해주는 도구입니다. 이는 부라우저의 개발자 도구에 속해있는 기능으로, 최신 브라우저에는 거의 다 탑재되어 있는 기능이다.
      브라우저마다 기능과 사용법이 모두 다르지만, 크롬의 디버거를 기준으로 설명하도록 하겠습니다.
      
      디버거를 사용한 디버깅은 브레이크포인트(Breakpoint, 중단점)를 설정하는 것으로부터 시작됩니다.
      
      브레이크포인트는 프로그램이 실행되는 중간에 특정 지점에서 멈추는 기능으로 마치 시간이 멈춘 것처럼 그 정지 상태의 모든 것을 보고 수정할 수 있게 해주죠.
      (실제 실행은 교재 211~212 페이지 참고)
      개발자 도구에서 우측을 보게되면 콜 스택(Call Stack)이란 것이 있죠. 이건 어떤 함수들로부터 순차적으로 호출되어서 여기까지 왔는지를 알려 줍니다.
      지금 농구 게임의 경우 onClick() -> onComputerShoot() -> updateAI() 순서로 실행되어 온 내역을 알 수 있습니다.
      스택이라는 이름처럼 가장 최신의 것이 제일 위쪽에 위치하는 것입니다.
      
