* 숫자의 유형

  1. 정수 (1,400,-5 등등)
  2. 부동 소수점 (12.5,56.77088 등등)
  3. Doubles / 표준 부동 소수점 숫자보다 정밀도가 더 높은 유형의 부동 소수점 숫자
  4. 바이너리 / 컴퓨터의 가장 낮은 수준의 언어 (0, 1)
  5. 8진법 / 각 열에 0~7을 사용
  6. 16진수 / 0~9를 사용하고 각 열에 a~f를 사용 (CSS색상 표기할때를 참고)

* 유용한 번호 표기 방식

  숫자를 반올림 하고 싶은 경우 toFixed() 를 사용
  예시) let lotsOfDecimal = 1.7689809;
       lotsOfDecimal; // 1.7689809
       let twoDecimalPlaces = lotsOfDecimal.toFixed(2);
       twoDecimalPlaces; // 1.77
     
* 이스케이프 표기법
  
  이전 문제 코드 줄을 수정하려면 문제 인용 부호를 이스케이프해야합니다. 이스케이프 문자는 코드의 일부가 아닌 텍스트로
  인식되는지 확인하기 위해 문자를 처리하는 것을 의미합니다. js에서는 문자 바로 앞에 백 슬래시(\)를 넣어서 이를 수행합니다.
  
* 템플릿 리터럴
  
  접할 수 있는 또 다른 유형의 문자열 구문은 템플릿 리터럴(템플릿 문자열)입니다. 이것은 보다 유연하고, 읽기 쉬운 문자열을 제공하는 새로운 구문입니다.
  표준 문자열 리터럴을 템플릿 리터럴로 바꾸려면 "",''를 ``으로 바꿔야합니다.
  let output = 'I like the song "' + song + '". I gave it a score of ' + (score/highestScore * 100) + '%.'; 를
  output = `I like the song "${ song }". I gave it a score of ${ score/highestScore * 100 }%.`; 로 변경 가능
  물론 song 내의 내용을 ""에서 ``으로 변경해서 사용
  더불어 기존 문자열 리터럴을 사용하여 열 바꾸기를 시도하려 한 경우 \n 을 붙여서 사용해야했는데
  템플릿 리터럴의 경우 줄 바꿈이 적용되기에 코드 내에서 줄 바꾸기를 하면 적용이 된다.
  
* 케이스 변경

  toLowerCase() = 모든 문자열을 소문자로 변경
  toUpperCase() = 모든 문자열을 대문자로 변경
  
  
