# jQuery

 * 복사할 <script> 태그를 보면서 흔히 보기 힘든 'integrity', 'crossrigin' 속성이 포함되어 있습니다.
   이는 'Subresource intergrity checking' 이라는 일종의 보안 장치로서, 'src'에 명시된 스크립트 파일이 원본 파일이 맞는지를 검사해 주는 역할을 합니다.
   브라우저는 요청된 스크립트 파일을 불러온 후 파일 내용 전체에 대해 해시값을 생성한 후, intergrity 속성의 값과 일치하는지를 확인합니다.
   만약 다르다면 중간에 누군가 파일 내용을 변조했을 위험이 있으므로 실행하지 않고 무시해 버리게 됩니다.
   
   매우 최신 브라우저에서만 지원되는 기능이고 당장 제이쿼리를 사용하기 위해 꼭 필요한 것은 아니기 때문에 꼭 사용해야하는건 아니지만, 무슨 역할을 하고 어떤 경우에 필요한 것인지 알고는 있어야합니다.
   브라우저는 기본적으로 자신이 이해하지 못하는 속성은 무시해 버리기 때문에 지원하지 않는 브라우저가 있더라도 굳이 속성을 지울 필요는 없습니다.
   
 * jQuery의 $
   
   - $의 핵심 기능은 '원하는 DOM 엘리먼트를 셀렉트하는 기능입니다. 이전의 document.getElmentById()는 
     $('#user_score');와 같이 쉽게 셀렉트할 수 있습니다.
     저 구문의 뜻은 'user_score'라는 id(# => id)를 가진 엘리먼트를 셀렉트하라는 뜻입니다.
     id가 아닌 특정 클래스를 가진 엘리먼트를 셀렉트하고 싶은 경우  .class 명을 통해 셀렉트하면 됩니다.
     $(.btn_user);
     해당 문법은 CSS에서 사용하던 문법과 동일합니다.
     
     1. id = "abc"를 셀럭트 
      - DOM API => document.getElementById("abc")
      - jQuery 셀렉터 => $("#abc");
      
     2. class = "abc"를 셀렉트
      - DOM API => document.getElementByClassName("abc")
      - jQuery 셀렉터 => $(".abc");
      
     3. <abc>태그를 셀렉트
      - DOM API => document.getElementsByName("abc")
      - jQuery 셀렉터 => $("abc");
      
   * DOM이란
   
    1. DOM 엘리먼트 - HTML 문서를 구성하는 요소로서 <div>...</div>와 같이 태그로 표현이 가능
    2. DOM 노드 - DOM 엘리먼트 뿐만 아니라 XML 엘리먼트, 텍스트 노드(<div>...<.div> 내의 '...')  등을 모두 포함하는 상위 개념
    3. 태그 - DOM 엘리먼트를 문자로 표현하기 위한 표기면
    
   * .prop
   
    - jQurey로 셀렉트한 결과에 '.prop()'을 호출하면 셀렉트된 모든 엘리먼트에 대해 각각 함수를 실행합니다. $('.btn_computer')로 셀렉트된 엘리먼트가 한 개이던,
    100개이던 간에 각각의 disabled 속성이 true / false로 바뀌게 되는 겁니다. 이는 jQuery를 사용하지 않으면 for문으로 반복하여 불러와야합니다.
    
   * 비동기? 동기? 함수란?
   
    - 함수는 유형에 따라 '동기 함수'와 '비동기 함수'로 나눌 수 있습니다.
      동기 함수는 일처리가 끝날 때까지 제어권을 돌려주지 않는 함수이고
      비동기 함수는 반대로 제어권을 먼저 돌려주고 일처리는 그 이후에 수행하는 함수입니다.
      
      동기 함수일 경우)
      $('#text').fadeOut(); // 시작 끝
      
      $('#text').html('새로운 문구'); // 시작 끝
      
      $('#text').fadeIn(); // 시작 끝
      
      fadeOut()이 시작해서 끝난 후 html()이 시작되고, 이게 끝나고 fadeIn()이 시작되는 구조입니다.
      지금까지 작성한 코드는 모두 이러한 구조로 되어있었습니다.
      
      그런데 이러한 구조는 종종 큰 문제를 발생시킵니다. 제이쿼리의 fadeOut()을 예로 들자면 이 함수는 인자로 아무것도 넣어주지 않았을 시 기본값으로 0.4초(400ms)에 걸쳐 실행됩니다.
      만약 이 함수가 제어권을 돌려주지 않고 0.4초 동안 문구를 희미하게 하는 일만 한다면 어떻게 될까요?
      그러면 그 0.4초 동안은 프로그램이 먹통이 되어버릴겁니다. 사용자가 다른 버튼을 클릭해도 아무런 반응이 없고 입력 필드에 타이핑을 해도 글자가 입력되지 않겠죠.
      0.4초란 시간이 별로 길지 않다고 생각될 수 있지만, 웹사이트를 방문한 사용자의 입장에서는 굉장히 느리고 불쾌한 감정을 받기에 충분한 시간입니다.
      
      그렇게 때문에 fadeOut()과 같이 장시간에 걸쳐 실행되어야하는 함수들은 일반적으로 '비동기 함수'의 형태를 띱니다. 즉 함수 실행과 동시에 제어권은 반환하고, 희미해지는 효과는
      별도로 진행하는 겨죠. 하기의 예시를 봅시다.
      
      비동기 함수일 경우)
      $('#text').fadeOut(); // 시작  
      
      $('#text').html('새로운 문구'); // 시작 끝
      
      $('#text').fadeIn(); // 시작 끝 끝
      
      이 예제을 보면, fadeOut()이 시작하자마자 그 다음줄인 html()이 시작됩니다. html() 함수는 금방 처리되므로 또 그 다음에 있는 fadeIn() 함수가 실행되죠
      하지만 이 시점에서도 fadeOut()은 일처리가 완료되지 않았습니다. 즉 글자가 아직도 희미해지고 있는 거죠. 그런데 fadeIn()이 시작되었기 때문에
      글자는 다시 또렷해져야 합니다. 이 상반되는 두 효과가 겹치게 되므로 우리가 브라우저에서 목격한 깜빡거리는 현상이 나타나게 됩니다.
      이 현상은 결국 fadeOut,In 모두 비동기 함수이기 때문입니다.
      
      이를 해결하기 위해서 비동기 함수들은 이러한 경우에 사용할 수 있도록 콜백 함수를 인자로 받을 수 있게 설계되어 있습니다. 
      콜백 함수란?? 호출자가 비동기 함수를 호출할 때 '니가 알아서 일을 하다가 일이 다 끝나면 내가 준 이 함수를 실행시켜 줘'라며 인자로 전달하는 함수입니다.
      예시를 보시죠
      
      $('#text').fadeOut(400, function () {
         $('#text').html('새로운 문구');
         $('#text').fadeIn();
      });
      
      fadeOut() 함수에 두 개의 인자를 넣어두었습니다. 첫 번째 인자는 효과가 지속될 시간으로 400ms, 즉 0.4초로 지정을 했습니다.
      두 번쨰 인자를 입력하기 위해서는 어쩔 수 없이 첫 번째 인자를 넣어 줘야만 합니다. 두 번째 인자가 바로 효과가 완료되었을 때 실행될 콜백 함수입니다.
      앞서 2,3번째 줄에 있던 코드가 안으로 들어간 것을 확인할 수 있습니다.
      fadeOut()이 모두 끝나면 저 콜백 함수가 실행되어 그 안에 있는 html()과 fadeIn() 함수가 이어 실행될 것입니다.
