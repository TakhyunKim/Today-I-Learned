# 자바스크립트

  1. expect
      - 특정 값이 ~~이다 라고 사전에 정의를 한 후 통과를 하면 테스트를 성공시키고, 통과를 하지 못하 테스트를 실패시킨다. 이후에 나오는 toBe는 matchers 라고 부르는 함수이며,
        이는 특정 값이 어떤 조건을 만족시켰는지, 또는 어떤 함수가 실행이 됬는지, 에러가 났는지 등을 확인 할 수 있게 해줍니다. 여기서 toBe는 특정 값이 우리가 정한
        값과 일치하는지 확인을 해줍니다.
  
  2. it 
      - it을 사용하게 되면 테스트 케이스 설명을 영어로 작성하게 되는 경우 "말이 되게" 작성할 수 있다. test라는 것과 같은 역할을 하며 새로운 테스트 케이스를 만드는 함수이다.
      
  3. describe 
      - 위 키워드를 사용하면 여러 테스트 케이스를 묶을 수 있습니다.
      
 * toBe(true), toBeTrue(), toBeTruthy()의 차이점
 
  Falsy 값으로 변환되는 값 : "", 0, null, NaN, false, undefined
  Truthy 값으로 변환되는 값 : everyting that is not falsy is truthy
 
  1. toBe(true)
      - Matcher 함수는 테스트를 수행합니다. actual === expected
      - 통사론: expect(flag).toBe(true | false)
      이 테스트는 flag 값이 true인 경우에만 통과합니다.
      
      ** expect().toBe() 예시
      function toBe() {
        return {
          compare: function(actual, expected) {
            return {
              pass: actual === expected
            };
          }
        };
      }
      
      - toEqual과 비슷해 보이지만 차이가 있다.
        toBe는 두 개의 대상이 단지 같은(equivalent) 정도만이 아니라 객체가 동일한지(same object)를 체크한다. 아래 예에서 그 차이를 확인하자.
        
        var spot = {species: "Border Collie"};
        var cosmo = {species: "Border Collie"};
        
        expect(spot).toEqual(cosmo) // success; equivalent
        expect(spot).toBe(cosmo) // failure; not the same object
        expect(spot).toBe(spot) // success; the same object
        
        위와 같이 spot과 cosmo가 같아 보이긴 하지만 같은 객체는 아니다.
        때문에 equal이지만 same하지는 않다. 이는 배열에서도 동일하게 적용된다. 아래 예시를 보자.
        
        var arr = [1,2,3];
        
        expect(arr).toEqual([1,2,3]); // success; equvalent
        expect(arr).toBe([1,2,3]) // failure; not the same array
        
        ** 결론 **
        toBe는 number, Boolean, string 같은 primitive 타입과 동일한 동작을 한다는 걸 알수 있다.
        자바스크립트에서는 === 오퍼레이터가 primitive 타입의 동일성(equal이 아닌 same) 여부를 체크하는데
        toBe를 사용하면 결국 === 오퍼레이터를 사용하는 것과 같다.
        
        그렇다면 toEqual에 비해서 항상 toBe를 사용하는게 안전한 것인가? 그렇지만은 않다.
        primive 타입을 체크할 경우에는 toEqual을 사용하는 것이 좋은데,
        이는 배열의 숫자를 변경한다든지 하는 경우 toBe는 테스트가 잘못될 여지가 있기 때문이다.
        
  
  2. toBeTrue()
      - Matcher 함수는 테스트를 수행합니다. (actual === true || is(actual, 'Boolean') && actual.valueOf())
      - 통사론 : expect(flag).toBeTrue()
      * toBe(true) -> 기본 부울 유형만 처리합니다.
      * toBeTrue() -> 기본 부울 유형과 부울 객체를 모두 처리합니다.
      따라서, expect(flag).toBeTrue()경우에만 통과 할 flag의 진정한 가치와 원시적 부울 유형인 or 경우인 true 값을 가진 부울 개체입니다.(번역기 그대로 작성 추후에 더 공부해야할 듯)
  
      ** expect().toBeTrue() 예시
      function toBeTrue(actual) {
        return actual === true ||
        is(actual, 'Boolean') &&
        actual.valueOf();
      }
  
  3. toBeTruty()
      - Matcher 함수는 테스트를 수행합니다. !!actual
      - 통사론 : expect(flag).toBeTruthy()
      - 참고 : !!연산자는 임의의 값을 부울 값으로 암시적으로 강제되는데 사용됩니다.
      이 테스트는 flag를 부울 값으로 강제한 후 값이 true 인 경우에만 통과합니다. 그 값은 위 flasy,truthy 값을 참조하여 주십셔.
      
      ** expect().toBeTruthy() 예시
      function toBeTruthy() {
        return {
          compare: function(actual) {
            return {
              pass: !!actual
            };
          }
        };
      }
      
      - 대상이 true로 나오기 원하는 경우 toBeTruthy, 반대로 false를 원할 때는 toBeFalsy를 사용한다.
      expect(true).toBeTruthy();
      expect(12).toBeTruthy();
      expect({}).toBeTruthy();
      
      expect(false).toBeFalsy();
      expect(null).toBeFalsy();
      expect("").toBeFalsy();
      
      jasmine의 참/거짓 체크 방식은 자바스크립트와 동일하다.
      true 뿐만 아니라 "hello world", 숫자 12, 객체 등 역시 참이 된다.
      false 값은 자바스크립트와 동일하다. 위 내용 참고
      
  4. toEqual 
      - 가장 많이 사용하고 심플한 Matcher이다. 말 그대로 구 개의 대상이 같은지 단순 체크한다.(정확히 일치하는 객체인지를 체크하는 것은 아니다.)
      
      맞는 예)
      expect(true).toEqual(true);
      expect([1,2,3]).toEqual([1,2,3]);
      expect({}).toEqual({});
      
      실패하는 경우의 예)
      expect(5).toEqual(12);
      expect([1,2,3,4]).toEqual([1,2,3]);
      expect(true).toEqual(100);
      
      
      
      
      
      
      
 
