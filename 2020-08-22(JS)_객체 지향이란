# 객체 지향 프로그래밍이란?

  * 정의
  - 객체 지향 프로그래밍은 문제를 여러 개의 객체 단위로 나눠 작업하는 방식을 뜻한다.
    대표적인 예로 JAVA, C# 등이 있다.
    
  * 장점
  - 객체 지향 프로그래밍의 가장 큰 특징은 클래스를 이용하여 연관 있는 처리부분(함수)와 데이터 부분(변수)를 하나로 묶어 객체(인스턴스)를 생성해 사용한다는 점이다.
    그리고 프로젝트를 독립적인 객체 단위로 분리해서 작업할 수 있기 때문에 여러 개발자와 협업해 규모가 큰 프로젝트를 진행할 수 있으머, 유지보수 측면에서도 뛰어나다는 장점이 있다.
    
  * 객체란?
  - 물리적으로 존재하거나(차,책,사람) 추상적인 것(회사, 날짜) 중에서 자신의 속성과 동작을 가지는 모든 것을 말한다.
    객체는 속성(필드)과 메소드(동작)로 구성된 자바 객체로 모델링 할 수 있다.
   
  * 객체 간의 관계
  - 객체 지향 프로그램에서는 객체는 다른 객체와 관계를 맺고 있다.
    집합 관계: 완성품과 부품의 관계
    사용 관계: 객체가 다른 객체를 사용하는 관계
    상속 관계: 종류 객체와 국체적인 사물 객체 관계
  
  * 객체 지향 프로그래밍
  - 부품객체를 만들고 이것들은 하나씩 조립해서 완성된 프로그램을 만드는 기법
  ex) 슬라이딩 배너 (next, prev 버튼, auto 기능, 정지버튼 기능 등의 부품 객체를 모두 조립하여 하나의 슬라이딩 객체가 완성)
  
  * 자바스크립트 생성자란?
  - 여러 객체 지향 프로그래밍 언어에서는 객체의 클래스를 정의한 다음 해당 클래스의 인스턴스에 해당하는 개별 객체를 생성하는 것이 가능합니다.
    자바스크립트에서는 진정한 클래스를 지원하지는 않지만 자바스크립트 객체를 생성하는 생성자 함수를 제공하고 있습니다.
    자바스크립트 생성자는 new 연산자와 함께 사용되는데, 먼저 프로퍼티가 없는 새 객체를 생성한 후 생성자 함수를 호출하고 새 객체를
    this 키워드의 값으로 전달하며, 객체가 사용되기 전에 설정되어 있어야 할 프로퍼티를 설정하는 역할을 합니다.
    생성자 함수는 직접 정의할 수 있는데, 단지 this에 프로퍼티를 추가하는 함수를 작성하기만 하면 됩니다.

    (예제)
    function Point(x,y) {
      this.x = x;
      this.y = y;
      // 보통 생성자 함수는 반환값이 없다.
    }
    
    point1 = new Point(5,5);
    point2 = new Point(8,8);
    
    console.log(JSON.stringify(point1)); // {"x":5,"y":5}
    console.log(JSON.stringify(point2)); // {"x":8,"y":8}
  
  * 자바스크립트 프로토타입(prototype)
  - 모든 자바스크립트 객체는 그것의 프로토타입 객체에 대한 내부 참조를 가지고 있으며, 프로토타입 객체로부터 프로퍼티를 상속받습니다.
    모든 함수는 함수가 정의됬을 때 자동으로 생성되고 초기화되는 prototype 프로퍼티를 가지고 있습니다.

  
    (예제)
    function Point(x,y) {
      this.x = x;
      this.y = y;
    }
    
    Point.prototype.add = function() {
      return this.x + this.y;
    }
    
    point1 = new Point(5,5);
    point2 = new Point(8,8);
    
    console.log(point1.add()); // 10
    console.log(point2.add()); // 16
    
    메서드와 프로퍼티는 객체가 생성된 이후에도 동적으로 프로토타입에 추가될 수 있습니다.
    
     (예제)
    function Point(x,y) {
      this.x = x;
      this.y = y;
    }
    
    // 객체를 먼저 생성
    point1 = new Point(5,5);
    point2 = new Point(8,8);
    
    Point.prototype.add = function() {
      return this.x + this.y;
    }
    
    console.log(point1.add()); // 10
    console.log(point2.add()); // 16
    
  * 자바스크립트 프로토타입을 쓰는 이유
    1. 객체 지향적이고 상속을 사용할 수 있습니다.
    2. 프로토타입 객체를 사용하면 객체가 프로토타입의 프로퍼티를 상당수 상속할 수 있어서 각 객체에 필요한 메모리의 양을 줄일 수 있다.
    
  * 인스턴스 프로퍼티와 메서드
  - 자바스크립트는 객체지향 언어이고, 같은 클래스(생성자 함수)의 객체가 여러 개 있을 수 있으며, 각 객체는 해당 클래스의 인스턴스에 해당된다.

    (예제)
    function Point(x,y) {
      this.x = x;
      this.y = y;
    }
    
    point1 = new Point(5,5);
    point2 = new Point(8,8);
    
    console.log(point1.x); // 5
    console.log(point2.y); // 8
    인스턴스 프로퍼티에는 개별 객체(이를테먄 point1.x)를 통해 접근할 수 있습니다.
 
  * 인스턴스 메서드
  - 인스턴스 메서드는 특정 인스턴스나 객체를 대상으로 호출됩니다.
    인스턴스 메서드를 구현할 때는 this 키워드를 이용해 메서드를 호출할 인스턴스나 객체를 참조할 수 있습니다.
    
    function Point(x,y){
    this.x = x;
    this.y = y;
    }
    
    // 객체를 먼저 생성
    point1 = new Point(5,5);
    point2 = new Point(8,8);
    
    //프로토타입에 메서드를 추가
    Point.prototype.add = function(){
      return this.x + this.y;
    }
    
    console.log(point1.add()); // 10
    console.log(point2.add()); // 16
    
  * 클래스 프로퍼피
  - 자바스크립트에서 클래스 프로퍼티는 클래스의 각 인스턴스와 연관된 것이 아닌 클래스 자체와 연관된 프로퍼티를 말합니다.
    클래스의 인스턴스가 얼마나 생성됬느냐와 관계없이 각 클래스 프로퍼티는 각각 하나씩만 존재합니다.
    자바스크립트에서 클래스 프로퍼티를 정의하려면 생성자 함수 자체의 프로퍼티로 정의하기만 하면 됩니다.
    이는 자바스크립트 함수 역시 객체이기 때문입니다.
    
    function Circle(r){
      this.radius = r;
    }
    
    // 클래스 프로퍼티를 정의
    Circle.PI = 3.14159265;
    
    Circle.prototype.area = function(){
      return Circle.PI * this.radius * this.radius;
    }
    
    c1 = new Circle(10);
    
    console.log(c1.area()); // 314.159265
    
  * 클래스 메서드
  - 클래스 메서드는 클래스의 인스턴스가 아닌 클래스와 연관된 메서드입니다.
    자바스크립트에서 클래스 메서드를 정의하려면 적절한 함수를 성성자의 프로퍼티로 만들기만 하면 됩니다.
    클래스 메서드는 생성자 함수를 통해 호출되기 때문에 this 키워드는 클래스의 특정 인스턴스를 참조하지 않습니다.
    그래서 보통 클래스 메서드에서는 this를 전혀 사용하지 않습니다.
    
    function Point(x,y){
      this.x = x;
      this.y = y;
    }
    
    // 클래스 메서드를 정의
    Point.getHigherPoint = function(a,b){
      if(a.x > b.x) return a;
      else return b;
    }
    
    point1 = new Point(5,5);
    point2 = new Point(8,8);
    
    console.log(Point.getHigherPoint(point1,point2).y); // 8
    
    
    
    
    
    
