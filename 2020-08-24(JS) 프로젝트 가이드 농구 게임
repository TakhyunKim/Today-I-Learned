# 농구 게임

 - 프로젝트 설계하기
   * 게임에서 레이아웃과 UI 요소들에 대한 뼈대를 제공하는 그림을 흔히 와이어프레임(wireframe)이라고 합니다.
    
 - getElmentById()
   * getElmentById()는 도큐먼트의 모든 엘리먼트들 중에서 주어진 id 값들을 갖고 있는 엘리먼트를 리턴해 줍니다.
     id 속성은 정의 자체가 도큐먼트 내에서 고유한 값(단일 값)이여야 하기 때문에 언제나 딱 한 개의 엘리먼트만을 리턴해 줍니다.
     만약 어떤 이유에서든 동일한 id 값을 가진 엘리먼트가 여러개 존재한다면 어떤 엘리먼트를 리턴해 줄지는 아무도 모릅니다.
     또한 주어진 값과 동일한 id를 가진 엘리먼트가 없다면 "null"을 리턴하게 됩니다.
     모든 엘리먼트를 탐색해야 하기에 느릴 지도 모른다고 오해할 수 있지만, 브라우저는 똑똑하게도 미리 id 값과 엘리먼트를
     연결시킬수 있는 '매핑 테이블(Mapping table)'을 만들어 놓기 때문에 document.getElmentById()는 매우 빠른 속도를 자랑합니다.
     DOM 엘리먼트를 탐색하는 모든 함수들 중에 가장 빠릅니다. 따라서 가능하다면 최대한 이 함수를 사용하는 것이 성능면에서 바람직합니다.
     
 - innnerHTML
  * 위 속성은 특정 엘리먼트의 하위값을 바꾸고 싶을 때 용이하다.
    특히 document.write()와 마찬가지로 대체하려는 문자열에 '태그'가 포함되어 있더라도 실제 엘리먼트로 변환해 주기 때문에 매우 편하게 쓸 수 있는 속성입니다.
    위 내용에 대한 예시는 책 179페이지를 참고하시오!
    
 - 지역 변수에 따른 에러에 관한 내용
  * 자바스크립트에서의 모든 변수는 스코프(Scope)라는 일종의 범위를 갖습니다. 어떠한 스코프 안에서 선언된 변수는 그 스코프 안에서만 존재하게 되며
    다른 스코프에서의 접근은 불가능하게 됩니다.
    
    스코프는 크게 두 가지 타입으로 나뉘어집니다. 글로벌 스코프(Global Scope, 전역)와 로컬 스코프(Local Scope, 지역)라고 불리죠
    
    글로벌 스코프는 지금까지 우리가 인지하지 못한 채 사용해 왔던 스코프인데요. <script>태그나 스크립트 파일 안에 선언된 모든 변수들 중에 특정 함수의 블록 안에 위치하지 않은 것들은
    모두 [글로벌 스코프]에 들어가 있다고 보면 되고, 이러한 변수들을 가르켜 전역 변수(Global Variable)라고 칭합니다.
    
    반면, [로컬 스코프]는 그 범위가 함수에 종속됩니다. a라는 함수가 있고, b라는 함수가 있을 때, a에도 로컬 스코프가 존재하고, b에도 로컬 스코프가 존재합니다.
    이 둘은 모두 로컬 스코프인 동시에 서로 다른 스코프입니다. 따라서 글로벌 스코프는 딱 한 개만 존재하는 반면에 로컬 스코프는 여러 개가 존재할 수 있는 것입니다.
    
    각 함수의 블록 내부, 즉 로컬 스코프에 선언된 변수들은 지역 변수(Local Variable)라고 합니다. 이들은 해당 함수 안에서민 존재하기 때문에,
    함수가 호출될 때 생성되고 함수가 종료될 때 사라집니다.
    
    앞서 두 가지의 예제 코드에서 comScore 변수를 onComputerShoot() 함수 밖에 선언을 했을 떈 [글로벌 스코프]에 생성이 된 것이고,
    함수 안에서 선언을 했을 땐 그 함수만의 [로컬 스코프]에 변수가 생성이 된 것입니다.
    
    그런데, 자바스크립트에서는 스코프 간의 참조 규칙이 있습니다. 하기 내용을 통해 알아보겠습니다.
    
    var a = 1;
    
    function func1() {
      var b = 2;
      
      console.log(a); // 1 => 같은 스코프에서는 없으므로 (부모 스코프)에서 찾음
      console.log(b); // 2 => 같은 스코프에서 있으므로 바로 참조 가능 
      console.log(c); // 에러
    }
    
    function func2() {
      var c = 3; // 이는 서로 다른 스코프이므로 참조가 불가능
    }
    
    자바스크립트에서는 어떠한 변수를 찾을 때, 먼저 현재의 [로컬 스코프]에서 찾아본 후, 없다면 [글로벌 스코프]가 나올 때까지 하나씩 상위의 [부모 스코프]로 올라가면서 탐색하게 됩니다.
    따라서 func1()에선 로컬 스코프에 있는 변수 b나 부모(여기에서는 글로벌) 스코프에 있는 변수 a를 사용할 수 있게 되지만 c의 경우는 찾을 수 없습니다.
    위 예제와 같이 func2()에 변수 c가 있긴 하지만, 이는 func1()입장에서는 부모 스코프가 아닌 아예 별개의 다른 스코프이기 때문에 참조할 수 있는 방법이 없습니다.
    따라서 console.log(c);는 변수 c를 찾지 못하여 에러를 출력하게 됩니다.
